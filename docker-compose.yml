version: '3.8'

services:
  app:
    image: order-service-optimized
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order-service-app
    ports:
      - "5001:5000"
    environment:
      - HOST=0.0.0.0
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=orderdb
      - DB_PORT=5432
      - FLASK_ENV=development
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - order-network
    # For development, mount code as volume
    volumes:
      - ./app:/order-service/app
      - ./migrations:/order-service/migrations
      - ./run.py:/order-service/run.py
      - ./manage.py:/order-service/manage.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:14-alpine
    container_name: order-service-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orderdb
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - order-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  order-network:
    driver: bridge

volumes:
  postgres_data:
